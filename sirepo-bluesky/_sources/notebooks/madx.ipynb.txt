{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# MAD-X Simulations\n",
    "\n",
    "This section is based on the **BL2_TDC** ATF example.\n",
    "\n",
    "**Hint**: See the [List of predefined simulations in Sirepo](../simulations.rst) for examples of identifiers for different beamlines."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%run -i ../../../examples/prepare_flyer_env.py\n",
    "\n",
    "from sirepo_bluesky.sirepo_bluesky import SirepoBluesky\n",
    "from sirepo_bluesky.madx_flyer import MADXFlyer\n",
    "from sirepo_bluesky.sirepo_ophyd import create_classes\n",
    "\n",
    "connection = SirepoBluesky(\"http://localhost:8000\")\n",
    "\n",
    "data, schema = connection.auth(\"madx\", \"00000001\")\n",
    "classes, objects = create_classes(connection.data,\n",
    "                                  connection=connection,\n",
    "                                  extra_model_fields=[\"rpnVariables\"])\n",
    "globals().update(**objects)\n",
    "\n",
    "madx_flyer = MADXFlyer(connection=connection,\n",
    "                       root_dir=\"/tmp/sirepo-bluesky-data\",\n",
    "                       report=\"elementAnimation250-20\")\n",
    "\n",
    "def madx_plan(parameter=ihq1, value=2.0):\n",
    "    yield from bps.mv(parameter.value, value)\n",
    "    return (yield from bp.fly([madx_flyer]))\n",
    "\n",
    "(uid,) = RE(madx_plan())  # noqa F821\n",
    "hdr = db[uid]\n",
    "tbl = hdr.table(stream_name=\"madx_flyer\", fill=True)\n",
    "print(tbl)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get the original data file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import tfs\n",
    "\n",
    "for name, doc in hdr.documents():\n",
    "    if name == \"resource\":\n",
    "        resource_doc = doc\n",
    "        print(resource_doc)\n",
    "filename = os.path.join(resource_doc[\"root\"], resource_doc[\"resource_path\"])\n",
    "df = tfs.read(filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.figure()\n",
    "plt.plot(df[\"S\"], df[\"BETX\"])\n",
    "plt.plot(df[\"S\"], df[\"BETY\"])\n",
    "plt.grid()\n",
    "plt.xlabel(\"s [m]\")\n",
    "plt.ylabel(\"betx, bety [m]\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Screenshot from Sirepo website\n",
    "\n",
    "![image.png](../../../images/madx_twiss2_file.png)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
