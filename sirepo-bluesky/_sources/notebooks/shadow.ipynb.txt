{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "# Run Sirepo/Shadow simulations with Bluesky\n",
    "\n",
    "This section is based on the **basic** example.\n",
    "\n",
    "**Hint**: See the [List of predefined simulations in Sirepo](../simulations.rst) for examples of identifiers for different beamlines."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Run \"Beamline\" Shadow simulations\n",
    "\n",
    "In this example, we run a single Shadow simulation and collect the resulting averaged intensity and corresponding 2D intensity distribution from the \"Watchpoint\" report on the \"Beamline\" page of Sirepo/Shadow app."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Start ``ipython`` and run the following where ``sim_id`` is the UID for the simulation we are working with:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%run -i ../../../examples/prepare_det_env.py\n",
    "\n",
    "from sirepo_bluesky.shadow_detector import SirepoShadowDetector\n",
    "\n",
    "shadow_det = SirepoShadowDetector(\n",
    "    name=\"shadow_det\",\n",
    "    sim_id=\"00000001\",\n",
    "    sim_report_type=\"default_report\",\n",
    "    sirepo_server=\"http://localhost:8000\",\n",
    "    root_dir=\"/tmp/sirepo-bluesky-data\",\n",
    ")\n",
    "\n",
    "shadow_det.select_optic(\"Aperture\")\n",
    "shadow_det.create_parameter(\"horizontalSize\")\n",
    "shadow_det.create_parameter(\"verticalSize\")\n",
    "shadow_det.read_attrs = [\"image\", \"mean\"]\n",
    "shadow_det.configuration_attrs = [\"horizontal_extent\", \"vertical_extent\", \"shape\"]\n",
    "\n",
    "shadow_det.active_parameters[\"Aperture_horizontalSize\"].set(1.0)\n",
    "shadow_det.active_parameters[\"Aperture_verticalSize\"].set(1.0)\n",
    "shadow_det.duration.kind = \"hinted\"\n",
    "\n",
    "uid, = RE(bp.count([shadow_det]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can access the data as the last item in the database (`db[-1]`) or directly via the returned `uid`, which when plotted as an image will look like:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "hdr = db[uid]\n",
    "imgs = np.array(list(hdr.data(f'{shadow_det.name}_image')))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cfg = hdr.config_data(shadow_det.name)[\"primary\"][0]\n",
    "hor_ext = cfg[f\"{shadow_det.name}_horizontal_extent\"]\n",
    "vert_ext = cfg[f\"{shadow_det.name}_vertical_extent\"]\n",
    "plt.imshow(imgs[0], aspect=\"equal\", extent=(*hor_ext, *vert_ext))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
