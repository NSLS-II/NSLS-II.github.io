.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_cookbook_live_recon.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_cookbook_live_recon.py:


Streaming Tomographic Reconstruction
************************************

Problem
-------

Reconstruct a 2D cross-section of a sample from projections, as if it were
rotated in place in front of a strip detector.

This example uses the library `tomopy <https://tomopy.readthedocs.io>`_.

Approach
--------

Create a simulated detector coupled to a simulated motor, standing in for the
strip detector and the rotating sample holder. Scan the motor from zero to pi,
and use tomopy to generate simulated projections of a sample at several angles.
This provides our simulated dataset.

Now, use tomopy to reconstruct the sample "density" from these projections.
To give tomopy live access to the data, wrap it in a class that acts as a
bluesky callback, an interface between tomopy and bluesky's document model.

Also make a callback for visualizing the projections side by side (a sinogram).

Example Solution
----------------




.. image:: /cookbook/images/sphx_glr_live_recon_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    +-----------+------------+------------+----------------+
    |   seq_num |       time |      angle | angle_setpoint |
    +-----------+------------+------------+----------------+
    |         1 | 14:42:35.9 |      0.000 |          0.000 |
    |         2 | 14:42:36.7 |      0.035 |          0.035 |
    |         3 | 14:42:37.3 |      0.071 |          0.071 |
    |         4 | 14:42:37.9 |      0.106 |          0.106 |
    |         5 | 14:42:38.6 |      0.141 |          0.141 |
    |         6 | 14:42:39.2 |      0.176 |          0.176 |
    |         7 | 14:42:39.8 |      0.212 |          0.212 |
    |         8 | 14:42:40.5 |      0.247 |          0.247 |
    |         9 | 14:42:41.1 |      0.282 |          0.282 |
    |        10 | 14:42:41.7 |      0.318 |          0.318 |
    |        11 | 14:42:42.4 |      0.353 |          0.353 |
    |        12 | 14:42:43.0 |      0.388 |          0.388 |
    |        13 | 14:42:43.7 |      0.424 |          0.424 |
    |        14 | 14:42:44.3 |      0.459 |          0.459 |
    |        15 | 14:42:45.0 |      0.494 |          0.494 |
    |        16 | 14:42:45.6 |      0.529 |          0.529 |
    |        17 | 14:42:46.3 |      0.565 |          0.565 |
    |        18 | 14:42:46.9 |      0.600 |          0.600 |
    |        19 | 14:42:47.6 |      0.635 |          0.635 |
    |        20 | 14:42:48.2 |      0.671 |          0.671 |
    |        21 | 14:42:48.8 |      0.706 |          0.706 |
    |        22 | 14:42:49.5 |      0.741 |          0.741 |
    |        23 | 14:42:50.1 |      0.777 |          0.777 |
    |        24 | 14:42:50.7 |      0.812 |          0.812 |
    |        25 | 14:42:51.4 |      0.847 |          0.847 |
    |        26 | 14:42:52.0 |      0.882 |          0.882 |
    |        27 | 14:42:52.7 |      0.918 |          0.918 |
    |        28 | 14:42:53.3 |      0.953 |          0.953 |
    |        29 | 14:42:53.9 |      0.988 |          0.988 |
    |        30 | 14:42:54.6 |      1.024 |          1.024 |
    |        31 | 14:42:55.2 |      1.059 |          1.059 |
    |        32 | 14:42:55.9 |      1.094 |          1.094 |
    |        33 | 14:42:56.5 |      1.130 |          1.130 |
    |        34 | 14:42:57.2 |      1.165 |          1.165 |
    |        35 | 14:42:57.8 |      1.200 |          1.200 |
    |        36 | 14:42:58.5 |      1.235 |          1.235 |
    |        37 | 14:42:59.1 |      1.271 |          1.271 |
    |        38 | 14:42:59.7 |      1.306 |          1.306 |
    |        39 | 14:43:00.4 |      1.341 |          1.341 |
    |        40 | 14:43:01.0 |      1.377 |          1.377 |
    |        41 | 14:43:01.6 |      1.412 |          1.412 |
    |        42 | 14:43:02.3 |      1.447 |          1.447 |
    |        43 | 14:43:02.9 |      1.483 |          1.483 |
    |        44 | 14:43:03.5 |      1.518 |          1.518 |
    |        45 | 14:43:04.2 |      1.553 |          1.553 |
    |        46 | 14:43:04.8 |      1.588 |          1.588 |
    |        47 | 14:43:05.5 |      1.624 |          1.624 |
    |        48 | 14:43:06.1 |      1.659 |          1.659 |
    |        49 | 14:43:06.7 |      1.694 |          1.694 |
    +-----------+------------+------------+----------------+
    |   seq_num |       time |      angle | angle_setpoint |
    +-----------+------------+------------+----------------+
    |        50 | 14:43:07.4 |      1.730 |          1.730 |
    |        51 | 14:43:08.0 |      1.765 |          1.765 |
    |        52 | 14:43:08.6 |      1.800 |          1.800 |
    |        53 | 14:43:09.3 |      1.836 |          1.836 |
    |        54 | 14:43:09.9 |      1.871 |          1.871 |
    |        55 | 14:43:10.6 |      1.906 |          1.906 |
    |        56 | 14:43:11.2 |      1.941 |          1.941 |
    |        57 | 14:43:11.9 |      1.977 |          1.977 |
    |        58 | 14:43:12.5 |      2.012 |          2.012 |
    |        59 | 14:43:13.1 |      2.047 |          2.047 |
    |        60 | 14:43:13.8 |      2.083 |          2.083 |
    |        61 | 14:43:14.4 |      2.118 |          2.118 |
    |        62 | 14:43:15.1 |      2.153 |          2.153 |
    |        63 | 14:43:15.7 |      2.189 |          2.189 |
    |        64 | 14:43:16.4 |      2.224 |          2.224 |
    |        65 | 14:43:17.0 |      2.259 |          2.259 |
    |        66 | 14:43:17.7 |      2.294 |          2.294 |
    |        67 | 14:43:18.3 |      2.330 |          2.330 |
    |        68 | 14:43:19.0 |      2.365 |          2.365 |
    |        69 | 14:43:19.6 |      2.400 |          2.400 |
    |        70 | 14:43:20.3 |      2.436 |          2.436 |
    |        71 | 14:43:20.9 |      2.471 |          2.471 |
    |        72 | 14:43:21.6 |      2.506 |          2.506 |
    |        73 | 14:43:22.2 |      2.542 |          2.542 |
    |        74 | 14:43:22.8 |      2.577 |          2.577 |
    |        75 | 14:43:23.5 |      2.612 |          2.612 |
    |        76 | 14:43:24.1 |      2.647 |          2.647 |
    |        77 | 14:43:24.8 |      2.683 |          2.683 |
    |        78 | 14:43:25.4 |      2.718 |          2.718 |
    |        79 | 14:43:26.1 |      2.753 |          2.753 |
    |        80 | 14:43:26.7 |      2.789 |          2.789 |
    |        81 | 14:43:27.3 |      2.824 |          2.824 |
    |        82 | 14:43:28.0 |      2.859 |          2.859 |
    |        83 | 14:43:28.6 |      2.895 |          2.895 |
    |        84 | 14:43:29.3 |      2.930 |          2.930 |
    |        85 | 14:43:29.9 |      2.965 |          2.965 |
    |        86 | 14:43:30.5 |      3.000 |          3.000 |
    |        87 | 14:43:31.2 |      3.036 |          3.036 |
    |        88 | 14:43:31.8 |      3.071 |          3.071 |
    |        89 | 14:43:32.5 |      3.106 |          3.106 |
    |        90 | 14:43:33.1 |      3.142 |          3.142 |
    +-----------+------------+------------+----------------+
    generator scan ['a8e99b79'] (scan num: 1)




|


.. code-block:: python

    import glob
    import imageio
    import skimage
    import matplotlib.pyplot as plt
    import numpy as np

    import tomopy

    import bluesky.plans as bp
    from bluesky import RunEngine
    from bluesky.callbacks import LiveTable, CallbackBase
    from bluesky.utils import install_qt_kicker
    from ophyd import Device, Signal, Component as Cpt
    from ophyd.sim import SynAxis, NullStatus

    L = 64
    D = int(np.ceil(L * 2**0.5))  # diagonal
    obj = tomopy.cameraman(L)
    orig_obj = np.copy(obj)
    # obj = tomopy.checkerboard(L)
    # obj = tomopy.baboon(L)
    # obj = tomopy.lena(L)

    class TomoDet(Device):
        image = Cpt(Signal)
        def trigger(self):
            super().trigger()
            self.image.put(tomopy.project(obj, angle.read()['angle']['value']))
            return NullStatus()

    det = TomoDet(name='det')
    angle = SynAxis(name='angle')

    RE = RunEngine({})

    # Do this if running the example interactively;
    # skip it when building the documentation.
    import os
    if 'BUILDING_DOCS' not in os.environ:
        from bluesky.utils import install_qt_kicker  # for notebooks, qt -> nb
        install_qt_kicker()
        plt.ion()
        angle._fake_sleep = 0.001  # simulate slow motor movement


    class LiveRecon(CallbackBase):
        SMALL = 1e-6

        def __init__(self, name, x, y, ax=None, **recon_kwargs):
            if ax is None:
                ax = plt.gca()
            ax.set_title('Reconstruction using Tomopy')
            ax.set_xlabel('x')
            ax.set_ylabel('y')
            self.im = ax.imshow(np.zeros((y, x)), origin='upper')
            recon_kwargs.setdefault('num_gridx', x)
            recon_kwargs.setdefault('num_gridy', y)
            self._name = name
            self._x, self._y = x, y
            self._recon_kwargs = recon_kwargs

        def start(self, doc):
            self._partial = self.SMALL * np.ones((self._y, self._x))

        def event(self, doc):
            data = doc['data'][self._name]
            angle = doc['data']['angle']
            self._partial = tomopy.recon(data, angle, **self._recon_kwargs,
                                         init_recon=self._partial)
            self.im.set_data(self._partial)
            self.im.set_clim((np.min(self._partial), np.max(self._partial)))
            self.im.figure.canvas.draw_idle()


    class LiveSinogram(CallbackBase):
        def __init__(self, name, width, ax=None):
            if ax is None:
                ax = plt.gca()
            ax.set_title('Sinogram')
            ax.set_xlabel('sequence number')
            ax.set_ylabel('detector position')
            self.im = ax.imshow(np.zeros((1, width)), aspect='auto')
            ax.figure.colorbar(self.im, ax=ax)
            self._name = name
            self._width = width

        def start(self, doc):
            self._cache = []

        def event(self, doc):
            self._cache.append(doc['data'][self._name][0][0])
            arr = np.asarray(self._cache)
            self.im.set_data(arr.T)
            self.im.set_extent((0, len(self._cache), 0, self._width))
            self.im.set_clim((arr.min(), arr.max()))
            self.im.figure.canvas.draw_idle()


    class LiveRotation(CallbackBase):
        def __init__(self, x, y, ax=None):
            if ax is None:
                ax = plt.gca()
            ax.axis('off')
            self.ax = ax
            self.im = ax.imshow(np.zeros((y, x)), origin='upper')
            self.im.set_clim((orig_obj[0].min(), orig_obj[0].max()))

        def event(self, doc):
            angle = doc['data']['angle'] * 180 / np.pi
            self.ax.set_title(f'Angle: {angle:.2f}°')
            rotated = skimage.transform.rotate(orig_obj[0], angle, resize=False)
            self.im.set_data(rotated)
            self.im.figure.canvas.draw_idle()


    class LiveSaving(CallbackBase):
        def __init__(self, fig=None):
            self._fig = fig

        def event(self, doc):
            angle = doc['data']['angle']
            if self._fig:
                self._fig.savefig(f'recon_{angle:3.3f}.png')


    fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(18, 6))

    lt = LiveTable([angle])
    ls = LiveSinogram(f'{det.name}_image', D, ax=ax1)
    lrt = LiveRotation(L, L, ax=ax2)
    lr = LiveRecon(f'{det.name}_image', L, L, algorithm='art', ax=ax3)
    lsv = LiveSaving(fig=fig)

    RE(bp.scan([det], angle, 0, np.pi, 90), [lt, ls, lr, lrt, lsv])

    with imageio.get_writer('recon.gif', mode='I') as writer:
        for fn in sorted(glob.glob('recon_*.png')):
            image = imageio.imread(fn)
            writer.append_data(image)

**Total running time of the script:** ( 1 minutes  10.549 seconds)


.. _sphx_glr_download_cookbook_live_recon.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: live_recon.py <live_recon.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: live_recon.ipynb <live_recon.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
