

.. _sphx_glr_cookbook_count_with_table.py:


Simply 'count' a detector
*************************

Problem
-------

Take five sequential readings of a detector.

Approach
--------

Execute :func:`bluesky.plans.count` with a simulated detector (which could be
substituted by a real detector from ophyd) and display the reading using
:func:`bluesky.callbacks.LiveTable`.

Example Solution
----------------





.. rst-class:: sphx-glr-script-out

 Out::

    +-----------+------------+------------+
    |   seq_num |       time |        det |
    +-----------+------------+------------+
    |         1 | 19:38:15.4 |       0.00 |
    |         2 | 19:38:15.4 |       0.00 |
    |         3 | 19:38:15.4 |       0.00 |
    |         4 | 19:38:15.4 |       0.00 |
    |         5 | 19:38:15.4 |       0.00 |
    +-----------+------------+------------+
    generator count ['fb683f'] (scan num: 1)




|


.. code-block:: python

    import bluesky.plans as bp
    import bluesky.callbacks as bc
    from bluesky import RunEngine
    from bluesky.examples import det  # a simulated detector

    RE = RunEngine({})

    RE(bp.count([det], num=5), bc.LiveTable([det]))

**Total running time of the script:** ( 0 minutes  0.119 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: count_with_table.py <count_with_table.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: count_with_table.ipynb <count_with_table.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
